#!/bin/bash
# IBM_PROLOG_BEGIN_TAG 
# This is an automatically generated prolog. 
#  
# htxubuntu src/htx/usr/lpp/htx/setup/mem.setup 1.5.4.36 
#  
# Licensed Materials - Property of IBM 
#  
# COPYRIGHT International Business Machines Corp. 2010 
# All Rights Reserved 
#  
# US Government Users Restricted Rights - Use, duplication or 
# disclosure restricted by GSA ADP Schedule Contract with IBM Corp. 
#  
# IBM_PROLOG_END_TAG 
###### This script is used to collect the required memory statistics for hxemem64 exerciser.
###### Collect the large and huge page memory required memory statistics 
###### into the file ${HTX_LOG_DIR}/freepages
echo "Entering mem.setup.." >> $HTXNoise
proc_ver=`grep 'Processor Version' ${HTX_LOG_DIR}/htx_syscfg | awk '{ print $4 }'`
echo "mem.setup:proc_ver=$proc_ver" >> $HTXNoise

if [[ "$proc_ver" != "0x4e" && "$proc_ver" != "0x4f" ]]
then
    #P8 or less
    if [ -r ${HTXREGRULES}/hxemem64/mem_16m_hwpf_old ]
    then
        mv ${HTXREGRULES}/hxemem64/mem_16m_hwpf_old ${HTXREGRULES}/hxemem64/mem_16m_hwpf
    fi

    if [ -r ${HTXREGRULES}/hxemem64/rules.app_server_old ]
    then
        mv ${HTXREGRULES}/hxemem64/rules.app_server_old ${HTXREGRULES}/hxemem64/rules.app_server
    fi

    if [ -r ${HTXREGRULES}/hxemem64/rules.comm_db_pk_old ]
    then
        mv ${HTXREGRULES}/hxemem64/rules.comm_db_pk_old ${HTXREGRULES}/hxemem64/rules.comm_db_pk
    fi

    if [ -r ${HTXREGRULES}/hxemem64/rules.dl1_reloads_from_caches_old ]
    then
        mv ${HTXREGRULES}/hxemem64/rules.dl1_reloads_from_caches_old ${HTXREGRULES}/hxemem64/rules.dl1_reloads_from_caches
    fi

    if [ -r ${HTXREGRULES}/hxemem64/rules.hpc_comp_node_old ]
    then
        mv ${HTXREGRULES}/hxemem64/rules.hpc_comp_node_old ${HTXREGRULES}/hxemem64/rules.hpc_comp_node
    fi

    if [ -r ${HTXREGRULES}/hxemem64/rules.max_cache_hit_old ]
    then
        mv ${HTXREGRULES}/hxemem64/rules.max_cache_hit_old ${HTXREGRULES}/hxemem64/rules.max_cache_hit
    fi

    if [ -r ${HTXREGRULES}/hxemem64/rules.max_cache_miss_old ]
    then
        mv ${HTXREGRULES}/hxemem64/rules.max_cache_miss_old ${HTXREGRULES}/hxemem64/rules.max_cache_miss
    fi

    if [ -r ${HTXREGRULES}/hxemem64/rules.web_server_old ]
    then
        mv ${HTXREGRULES}/hxemem64/rules.web_server_old ${HTXREGRULES}/hxemem64/rules.web_server
    fi

    if [ ! -x ${HTXBIN}/hxemem64_new ]
    then
        cp ${HTXBIN}/hxemem64 ${HTXBIN}/hxemem64_new
        cp ${HTXBIN}/hxetlbie ${HTXBIN}/hxemem64
    fi

fi
Hugepagesize=`cat /proc/meminfo |grep Hugepagesize |awk '{print $2}'`
if [[ $Hugepagesize -lt 2048 ]]
then
    echo "Hugepagesize is not equal to 2M or 16M (Hugepagesize=${Hugepagesize})"
    echo "cache instances will not be created."
    echo "avail_16M=0,avail_16G=0,free_16M=0,free_16G=0" >  ${HTX_LOG_DIR}/freepages
    echo "mem_16M=0" >>  ${HTX_LOG_DIR}/freepages
    echo "cache_16M=0" >>  ${HTX_LOG_DIR}/freepages
    echo "tlbie_16M=0" >> ${HTX_LOG_DIR}/freepages
    exit
fi

if [[ $Hugepagesize -eq 2048 ]]
then
    mult_factor=5
else
    mult_factor=1
fi

# Number of available processors on the system
num_proc=`cat /proc/cpuinfo  |grep -i processor |wc -l`

#Find processor
cpu_name=cpu`cat /proc/cpuinfo  |grep -i processor | head -1 | awk '{print $3}'`

#Find if SMT is enabled
# smt_enabled=`ls /sys/devices/system/cpu/cpu0 | grep smt_snooze_delay | wc -l`
#Initilize exer variables to zero
cache_16M=0
tlbie_16M=0
mem_16M=0
mem_16M_l4=0

# Check the highest SMT of all the cores. If the highest value is
# more than 1, it means SMT is enabled
maxSMT=`cat ${HTX_LOG_DIR}/htx_syscfg 2> /dev/null | grep core|awk -F'(' '{print $2}'|awk -F')' '{print $1}'|sort -n -r| head -1`
num_cores=`cat ${HTX_LOG_DIR}/htx_syscfg 2> /dev/null | awk ' /Number of Cores/ {print $5}'`
percent_cores=`grep 'percent_hw_threads' ${HTXREGRULES}/hxetlbie/tlbie | awk '{ print $3 }' | head -1`
# Processor Version i.e will be 003e for p6 & 003f for p7
###proc_ver=`cat /proc/cpuinfo |grep -m 1 revision |awk {'print $5'}`
shared_processor_mode=`grep shared_processor_mode ${HTX_LOG_DIR}/htx_syscfg | awk '{print $3}'`

if [ "$shared_processor_mode" =  "no" ]
then

	if [ $((maxSMT)) -gt 1 ]
	then
	    smt_enabled=1
	fi

	#If SMT is enabled, find number of SMT threads supported on CPUs
	if [ "$smt_enabled" = "1" ]
	then
	    virtual_cpus=`ls -l /proc/device-tree/cpus | grep ^d | awk '($NF ~ /^PowerPC/)' | wc -l`
	    smt_thr_per_cpu=$((num_proc/virtual_cpus))
	    if [ "$proc_ver" = "0x3e" ]
	    then
		smt_thr_per_cpu_cache=$smt_thr_per_cpu
	    else
		#Check the SMT of all cores and take the highest value
		smt_thr_per_cpu_cache=$maxSMT
	    fi
	else
	    smt_thr_per_cpu=1
	    smt_thr_per_cpu_cache=1
	fi

	# For hxecache .
	# Find the number of cache instances runnning 
	num_instances=`grep chips ${HTX_LOG_DIR}/htx_syscfg | awk -F: '{print $2}'`

	# Find the instance with the maximum number of cpus in it.
	max_cpus_in_instance=`cat ${HTX_LOG_DIR}/htx_syscfg | grep "chip "|awk -F'(' '{print $2}'|awk -F')' '{print $1}'|sort -n -r| head -1`

	    if [ "$proc_ver" = "0x3e" ]
	    then
		#p6
		 pages_reserved_cache_per_instance=32
		Cpuset=8
	    elif [ "$proc_ver" = "0x3f" ]
	    then
		#p7
		Cpuset=8
		max_8MB_segments_required_per_core=$smt_thr_per_cpu_cache
		
			# In P7, L3 cache size is 4MB, hence 1 16M page is allocated to the cache thread
			# rolling it. Also 1/2 of 1 16M page is allocated to the prefetch thread. Hence
			# the worst case memory consumption will be in L3 Cache Roll with no prefetch.
			# In which case the maximum 16M pages required will be equal to number of cache
			# threads running, which is maximum ( 8 * 4 ).

		pages_reserved_cache_per_instance=$max_cpus_in_instance

	    elif [ "$proc_ver" = "0x4a" ]
	    then
		#p7+
			Cpuset=8
			# The same logic as in above case applies here, with the difference being as follows.
			# In P7+, size of L3 cache memory = 10 MB, hence for rollover, 20MB memory is required.
			# Hence, 2 16M pages are reserved per thread.
		
		pages_reserved_cache_per_instance=$((max_cpus_in_instance*2))

	    elif [[ "$proc_ver" = "0x4b" || "$proc_ver" = "0x4d" || "$proc_ver" = "0x4c" ]]
	    then
		#P8
			pages_reserved_cache_per_instance=$((max_cpus_in_instance/maxSMT))
		
		elif [[ "$proc_ver" = "0x4e" || "$proc_ver" = "0x4f" ]]
		then
		#P9
			pages_reserved_cache_per_instance=$(($((max_cpus_in_instance/maxSMT))*2*mult_factor)) #P9 cache size =10MB,1 cache thread for every (smt/2) threads. 
		
		fi

	     Cpuset=$((Cpuset*smt_thr_per_cpu_cache))

	    if [ "$proc_ver" == "0x3e" ]
	    then
		number_of_cache_instances=$(((num_proc/Cpuset)+1))
		cache_16M=$((number_of_cache_instances*pages_reserved_cache_per_instance))
	    else
		cache_16M=$((num_instances*pages_reserved_cache_per_instance))
	    fi
fi
# Minimum 16M pages requirement for hxemem64 is one per CPU
mem_16M=$num_proc
if [ "$shared_processor_mode" = "no" ]
then
	if [[ "$proc_ver" = "0x4e" || "$proc_ver" = "0x4f" ]]
	then
	#p9
		if [[ $Hugepagesize -eq 16384 ]]
		then
			mem_16M_l4=`expr 16 \* $num_instances`
		elif [[ $Hugepagesize -eq 2048 ]]
		then
			mem_16M_l4=`expr 10 \* 8 \* $num_instances`  # 10*2MB(to roll L3), num MCS = 8(assuming * mCS grouping)
		fi
	else
		mem_16M_l4=`expr 8 \* $num_instances`
	fi
	if [ $mem_16M_l4 -gt $mem_16M ]
	then
		mem_16M=$mem_16M_l4
	fi
	tlbie_16M=`expr $num_cores \* $percent_cores \/ 100`
	if [ $tlbie_16M -eq 0 ]
	then
		tlbie_16M=1
	fi	
    cache_buffer_pages=`expr $num_instances \* $mult_factor`
fi
leave_16M=`expr $cache_16M + $mem_16M + $tlbie_16M`
leave_16G=0

# Add extra 16M as buffer so that if any other process takes additional 16M pages. We don't fall short of it and hit any error.
extra_16M_buffer=5
if [[ $extra_16M_buffer -lt $cache_buffer_pages ]]
then
    extra_16M_buffer=$cache_buffer_pages
fi
leave_16M=`expr $leave_16M + $extra_16M_buffer`

free_16M=0
free_16G=0
avail_16M=0
avail_16G=0
allocate_16M=0

free_16M=`cat /proc/meminfo |grep HugePages_Free |awk '{print $2}'`
avail_16M=`cat /proc/meminfo |grep HugePages_Total |awk '{print $2}'`

if [ "$free_16G"x = "x" ]; then free_16G=0
fi
if [ "$avail_16G"x = "x" ]; then avail_16G=0
fi
if [ "$free_16M"x = "x" ]; then free_16M=0
fi
if [ "$avail_16M"x = "x" ]; then avail_16M=0
fi

# Deduct from free pool, pages accounted for cache.
free_16M=$((free_16M-leave_16M))
free_16G=$((free_16G-leave_16G))

# Check if VRM is enabled.
if [ ! "$CMVC_RELEASE" = "htxltsbml" ]
then
	 MEMORY_MODE=`cat /proc/ppc64/lparcfg 2> /dev/null | grep cmo_enabled | cut -f2 -d=`
fi

if [ $((MEMORY_MODE)) -eq 1 ]
then
    # Partition is running on virtual real memory (VRM)
    # Can't config 16M pages. Reset leave_16M to bypass while loop.
    leave_16M=0
    free_16M=0

    # Clear app specific vars.
    mem_16M=0
    cache_16M=0
fi

if [ $free_16M -lt 0 ] && [ $leave_16M -ge 1 ]
then
    allocate_16M=$((-free_16M))

    # Check to see if there is sufficient memory available to form the required 16M
    # pages.If req mem for 16M pages > half of the available memory, then we dont configure
    # the pages.

    current_free_memory_present_KB=`cat /proc/meminfo |grep MemFree | awk '{print $2}'`    
    current_free_memory_present=$((current_free_memory_present_KB*1024))

    if [ $((allocate_16M*16777216)) -le $((current_free_memory_present/2)) ] ; then
	
		num_16M_pages_at_present=`cat /proc/sys/vm/nr_hugepages`
	

        #Total 16M pages to be configured = existing size of 16M pages configured at present + 
     #                                                               extra 16M pages required 
        allocate_16M=$((num_16M_pages_at_present+allocate_16M))
        echo "Creating 16MB pages using the following command"
       
        echo "echo $allocate_16M > /proc/sys/vm/nr_hugepages"
        echo $allocate_16M > /proc/sys/vm/nr_hugepages
		
    fi 
       
    # Fetch the current number of 16M free pages
    free_16M=`cat /proc/meminfo |grep HugePages_Free |awk '{print $2}'`
    if [ "$free_16M"x = "x" ]; then 
    	free_16M=0
    	leave_16M=0
	mem_16M=0
	cache_16M=0
    elif [ $leave_16M -gt $free_16M ] #means no. of 16M pages are less than required.
    then
    	echo "Warning:There is not sufficient memory on the system to create the required no. of 16M pages."
    	echo "Memory exerciser may not use any 16M pages."
	leave_16M=$((leave_16M-mem_16M)) # mem will not use any 16M pages.
	mem_16M=0
	if [ $leave_16M -gt $free_16M ]
	then
		echo "cache instances will not be created."
		leave_16M=$((leave_16M-cache_16M))
		cache_16M=0
	fi
    fi
    free_16M=$((free_16M-leave_16M))
fi
    
avail_16M=`cat /proc/meminfo |grep HugePages_Total |awk '{print $2}'`
if [ "$avail_16M"x = "x" ]; then avail_16M=0
fi
        
if [ $free_16M -lt 0 ]; then free_16M=0
fi

if [ $free_16G -lt 0 ]; then free_16G=0
fi

free_16M=`expr $free_16M + $mem_16M`
echo "avail_16M=$avail_16M,avail_16G=$avail_16G,free_16M=$free_16M,free_16G=$free_16G" >  ${HTX_LOG_DIR}/freepages
#add details on freepages designated for cache for ablink.runsetup
echo "mem_16M=$mem_16M" >>  ${HTX_LOG_DIR}/freepages
echo "cache_16M=$cache_16M" >>  ${HTX_LOG_DIR}/freepages
echo "tlbie_16M=$tlbie_16M" >> ${HTX_LOG_DIR}/freepages
#Increasing /proc/sys/kernel/shmmax value to 1GB,considering cache exer worst case requirement for chip with 16cores.
echo "mem.setup:Setting /proc/sys/kernel/shmmax to 1GB"
echo 1073741824 > /proc/sys/kernel/shmmax

# Writing $shmall_4K to /proc/sys/kernel/shmall
# so that memory exerciser can allocate upto 90%
# of system memory through shared memory constructs.

total_mem=`cat /proc/meminfo | grep MemTotal | awk '{print $2}'`
shmall_new=`expr $total_mem \* 9 / 10` # Taking 90% of total memory.
shmall_4K=`expr $shmall_new / 4`  # in terms of 4K

echo "mem.setup:Writing $shmall_4K to /proc/sys/kernel/shmall"
echo $shmall_4K > /proc/sys/kernel/shmall
echo "Exiting mem.setup.." >> $HTXNoise
