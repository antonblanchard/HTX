#!/bin/ksh
proc_ver=`cat ${HTX_LOG_DIR}/htx_syscfg | grep Version | awk -F: '{print $2}'`
proc_ver_dec=`printf %d $proc_ver`

#Script will be executed only for P9, For P8 and below
# it will exit.
if [[ $proc_ver_dec -lt 78 ]]
then
	echo "mem.runsetup:runsetup is not needed for P8 and less, exiting..." >> $HTXNoise
    exit
fi

cur_mdt=`echo ${HTXMDT}mdt`

if [ ! -f $cur_mdt ]
then
    echo "mem.runsetup:$cur_mdt doesnt exists. Exiting...." | tee -a $HTXNoise
        exit
fi

#echo "cur_mdt: $cur_mdt"
#This runsetup script is executed only if memory exerciser is run under equaliser control
#So, check if selected mdt does not have equaliser_flag set to "1", exit.
eq_flag=`cat $cur_mdt | grep equaliser_flag | awk '{print $3}'`

if [[ $eq_flag != "1" ]]
then
    exit
fi

num_mem_instances=`cat $cur_mdt | grep mem | grep : | wc -l`
if [[ $num_mem_instances == "0" ]]
then
	echo "mem.runsetup:No memory instances found in selected mdt:$cur_mdt,exiting..." | tee -a $HTXNoise 		
    exit
fi

total_mem_usage=70
memory_usage_per_instance=$((total_mem_usage/$num_mem_instances))

cfg_file=`cat $cur_mdt | grep cfg_file | awk '{print $3}'`
cfg_file="${cfg_file%\"}"
cfg_file="${cfg_file#\"}"
echo "mem.runsetup:num_mem_instances: $num_mem_instances, memory_usage_per_instance: $memory_usage_per_instance, cfg_file: $cfg_file" >> $HTXNoise

rm ${HTXREGRULES}/hxemem64/default.eq.mem* 2> /dev/null

mem_instance=0
cat ${HTXCFGPATH}/$cfg_file | grep mem | while read -r str
do
    resource_str=`echo $str | awk '{print $1}'`
    # Find out number of mem devices entry for a given resource string line
    num_mem_dev_entry=`echo $str | awk '{while (match($0, /mem\[/)) {++c; $0=substr($0, RSTART+RLENGTH)}} END {print c}'`
    #echo "num_mem_dev_entry: $num_mem_dev_entry"
    while [ $num_mem_dev_entry -ne "0" ]
    do
         rule_file=${HTXREGRULES}/hxemem64/default.eq.mem$mem_instance
         cp ${HTXREGRULES}/hxemem64/default.eq $rule_file
         echo "cpu_filter = $resource_str" >> $rule_file
         echo "global_alloc_mem_percent = $memory_usage_per_instance" >> $rule_file
         let mem_instance=mem_instance+1
         let num_mem_dev_entry=num_mem_dev_entry-1
    done
done 


