#!/bin/bash

# IBM_PROLOG_BEGIN_TAG
#
# Copyright 2003,2016 IBM International Business Machines Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#                http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# IBM_PROLOG_END_TAG


if [[ -z ${HTX_HOME_DIR} ]] ; then
    htx_install_path=`cat /var/log/htx_install_path`
    if [ -f $htx_install_path/etc/scripts/htx_env.sh ]; then
        . $htx_install_path/etc/scripts/htx_env.sh
    else
        echo "/var/log/htx_install_path file is supposed to have HTX install directoy path."
        echo "Either file is empty or does not contain correct install path. Hence exiting..."    
        exit 1
    fi
fi

if [[ ! -d ${HTXMDT} ]] ; then
	echo "HTXMDT directory <${HTXMDT}> is not present, exiting"
	exit 1
fi


if [ "$*" != "" ]
then

case "$1" in
"--help"|"-h")
  echo "Usage:"
  echo "create_my_mdt <dev_name1>:<rule_filename1>  <dev_name2>:<rule_filename2> ...."
  echo
  echo "Note: If only devices type is given (like only sctu), omitting device id, all such devices(sctu0, sctu1 ...)"
  echo "will be picked up. If colon (':') is omitted after dev_name, default rule file is used."
  exit 0
;;
esac

i=0
# While loop for parsing parameters into device array and rulefile array
while [ $# != 0 ] 
do
  # devrule contains one parameter at a time for example <device_name>:<rulefile_name>
  devrules=$1

  # Parsing device name and putting in a array
  dev_name=`echo "$devrules" | awk -F : '{print $1}'`
  devs[i]=$dev_name

  # Parsing rulefile name
  rulefile_name=`echo "$devrules" | awk -F : '{print $2}'` 
  rules[i]=$rulefile_name
  
  i=`expr $i + 1`  
  shift
done

count=0
# While loop for taking devices from devs and put one by on seperated by space eg. <device name1> <device name2> ...
while [ $count -lt ${#devs[*]} ]
do
  # Avoid rules.Internode for sctu as we want to create devices for internode run differently
  
  if [ "${rules[$count]}" != "rules.InterNode" ]
  then
    devices="${devices}${devs[$count]} "
  fi
count=`expr $count + 1`
done

# Putting mdt name in a variable
mf=${HTXMDT}mdt.temp


# Creating a temporary mdt and  will have stanza for those devices which is present in devices variable 
  cat ${HTXMDT}mdt.all | create_mdt_with_devices.awk $devices >$mf

# While loop for creating final mdt and replacing rule file name for perticular device
c=0
while [ $c -lt ${#devs[*]} ]
do
  # Switch case for devices which is not present in mdt.all. 
  # Here it will look into respective mdt for that device and edit rule file name and generate the stanza.	
  case ${devs[$c]} in

  ablink)
    cat ${HTXMDT}mdt.ablink | create_mdt_with_devices.awk ${devs[$c]} | create_mdt_without_devices.awk default >>$mf  	
  ;;

  xyzlink)
   cat ${HTXMDT}mdt.xyzlink | create_mdt_with_devices.awk ${devs[$c]} | create_mdt_without_devices.awk default >> $mf
  ;;

  fabn)
   cat ${HTXMDT}mdt.inter_node | create_mdt_with_devices.awk ${devs[$c]} | create_mdt_without_devices.awk default >>$mf  	
  ;;

  fabc)
   cat ${HTXMDT}mdt.inter_chip | create_mdt_with_devices.awk ${devs[$c]} | create_mdt_without_devices.awk default >> $mf
  ;;
            
  iba)
    cat ${HTXMDT}mdt.hca | create_mdt_with_devices.awk ${devs[$c]} | create_mdt_without_devices.awk default >> $mf
    cat ${HTXMDT}mdt.hca.wrap | create_mdt_with_devices.awk ${devs[$c]} | create_mdt_without_devices.awk default>>$mf
  ;;
  esac
  # If rulefile is given then edit rulefile otherwise it will be the default  
  if [ "${rules[$c]}" != "" ]
  then
  if [ "${rules[$c]}" = "rules.InterNode" -a "${devs[$c]}" = "sctu" ]
  then
   cat /dev/null | create_my_sctu_stanzas.awk INTERNODE >>$mf
  fi
# Changing rulefile name for respective device for /reg/ and /emc/ 
  cat $mf | awk -F '/' 'BEGIN{t=0}; /:/ {if(t==1) {t=0}; if(dev ~ /[0-9]$/) {dev=sprintf("%s:",dev)};if( dev == $1) { t=1};d=sprintf("^%s[0-9]*:",dev);if($1 ~ d) {t=1};}(t==1) && (/reg_rules/||/emc_rules/){sub(/[A-Za-z0-9._]*/,rule,$2);print $1"/"$2;next};{print}' rule=${rules[$c]}  dev=${devs[$c]} >$mf.1
  mv $mf.1 $mf	
  fi
c=`expr $c + 1`
done

# Throw contents on screen and remove temp mdt file
cat $mf
rm $mf

#Else part will create stanza as default
else

#Check if really there are no args OR arg present but still null
# For this to work, ensure that arg passed to this screipt is done like "$arg"
if [ $# != "0" ]
then
   cat ${HTXMDT}mdt.all | create_mdt_with_devices.awk
   exit
else
   opt=""
fi

echo -e "\nHow do you want to create your own mdt file: -"
echo "With devices of your choice: 1"
echo "Without devices of your choice: 2"
echo "Note: Chosen devices will be selected (if option 1) or dropped (if option 2) from 'mdt.all'"
echo "while creating new mdt file of your choice."
while [ "$opt" = "" ]
do
  echo  -e "\nEnter 1 or 2: \c"
  read opt
  if [ "$opt" != "1" -a "$opt" != "2" ]
  then
    echo "Invalid choice!"
    opt=""
  fi
done

echo -e "\nFor device names used by HTX and their availability on this system,"
echo "you can look into 'mdt.all' in '$HTXMDT' directory"

echo -e "\nEnter device names, seperated by space only: \c"
read devices

echo -e "\nmdt files already present in '$HTXMDT' directory"
ls ${HTXMDT}

echo -e "\nEnter new mdt file name: \c"
read my_mdt_file 

echo -e "\nCreating new mdt file: $my_mdt_file"
if [ $opt = "1" ]
then
  echo "With devices: $devices"
  cat ${HTXMDT}mdt.all | create_mdt_with_devices.awk $devices > ${HTXMDT}$my_mdt_file
fi 

if [ $opt = "2" ]
then
  echo "Without devices: $devices"
  cat ${HTXMDT}mdt.all | create_mdt_without_devices.awk $devices > ${HTXMDT}$my_mdt_file
fi

fi
