#!/bin/bash

# IBM_PROLOG_BEGIN_TAG
# 
# Copyright 2003,2016 IBM International Business Machines Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# 		 http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# IBM_PROLOG_END_TAG
echo "Entering devconfig..." >> ${HTXNoise}
proc_ver=`grep Version ${HTX_LOG_DIR}/htx_syscfg | awk -F: '{print $2}'`
proc_ver_dec=`printf %d $proc_ver`

true_pvr=` grep "TRUE PVR ver" ${HTX_LOG_DIR}/htx_syscfg | awk -F: '{print $2}'`
true_pvr=`printf %d $true_pvr`

shared_proc_mode=`grep shared_processor_mode ${HTX_LOG_DIR}/htx_syscfg | awk '{print $3}'`

echo "Creating mdt files. Please wait a moment."
cat /dev/null | ${HTXSCRIPTS}/htxconf.awk > ${HTXMDT}/mdt.all

# Below logic is to avoid adding any hxediag stanza to any of the shift mdts.
# For that, hxediag is removed from mdt.all at first place before creating 
# other mdts out of it. After all shift mdts are created, original mdt.all
# is restored so that only mdt.all still has hxediag stanzas. 
cp ${HTXMDT}/mdt.all ${HTXMDT}/mdt.everything
cat ${HTXMDT}/mdt.everything | create_mdt_without_devices.awk eth > ${HTXMDT}/mdt.all

ln -sf ${HTXMDT}mdt.all ${HTXMDT}mdt.bu
echo "mdt.bu created ..."

# When BTF_SHIFT_ENV is exported to 1 (which happens from runstx with -x), we
# call build_net bpt and mdt_net with mdt.bu. This will add all the enabled eth
# interfaces to mdt.bu. So, when all other shift mdts are created from mdt.bu, 
# they will have eth devices in them.
if [[ $BTF_SHIFT_ENV -eq 1 ]];
then
    echo "Setting up shift automation for hxecom"
    /usr/bin/build_net bpt y n ${HTX_LOG_DIR}/networks 2>> ${HTXNoise}
    ${HTXSCRIPTS}/mdt_net mdt.bu
fi

cat ${HTXMDT}mdt.all | create_mdt_with_devices.awk  sctu > ${HTXMDT}mdt.sctu
cat ${HTXMDT}mdt.all | create_mdt_with_devices.awk fpu cache cpu rng tlbie > ${HTXMDT}mdt.cpu
cat ${HTXMDT}mdt.all | create_mdt_without_devices.awk sctu mem tlbie fpu cache cpu rng > ${HTXMDT}mdt.io

afu_dev=`ls /dev/cxl/ 2>/dev/null | awk '/afu[0-9].[0-9]d/ { print $1 }'`
  
if [[ "$afu_dev" != "" ]];
then
    # Create mdt.memcopy stanza for afu dedicated mode
    create_my_mdt afu[0-9].[0-9]d:default > ${HTXMDT}/mdt.memcopy
fi	

#create fabricbus mdts in early stage as "create_my_mdt" script uses these mdts for later use
# mdt.mem should have been created before create_ab_mem_mdt
if [[ $proc_ver_dec -ge 62 ]] && [[ "$shared_proc_mode" = "no" ]];
then
    create_ab_mem_mdt 2>> ${HTXNoise}
    create_mdt_ab 2>> ${HTXNoise}
    create_mdt_xyz 2>> ${HTXNoise}
fi
# Set cache rulefile based on architecture. 
if [ $true_pvr -le 74 ];
then
	cache_sw_prefetch_rf="default.sw_prefetch"
	cache_rf="default.p7"
elif [ $true_pvr -ge 75 ] && [ $true_pvr -le 77 ]
then
	cache_sw_prefetch_rf="default.sw_prefetch.p8"
	cache_rf="default.p8"
else
	cache_sw_prefetch_rf="default.sw_prefetch.p9"
	cache_rf="default.p9"
fi

# Set default combo rulefile based on architecture.
if [ $proc_ver_dec -lt 78 ];
then
	fpu_combo_rf="fpu_cpu_combo.p8"
else
	fpu_combo_rf="fpu_cpu_combo.p9"
fi


if [ -f ${HTX_LOG_DIR}/mpath_parts ]; then
    hxestorage_default=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s: ",$0)}'`
    hxestorage_buster=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s: ",$0)}'`
    hxestorage_easytier=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:easytier ",$0)}'`
    hxestorage_cache=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s: ",$0)}'`
    hxestorage_comm_db_opk=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.comm_db_opk ",$0)}'`
    hxestorage_comm_db_pk=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.comm_db_pk ",$0)}'`
    hxestorage_app_server=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.app_server ",$0)}'`
    hxestorage_web_server=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.web_server ",$0)}'`
    hxestorage_hpc_comp_node=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.hpc_comp_node ",$0)}'`
    hxestorage_hpc_io_node=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.hpc_io_node ",$0)}'`
    hxestorage_business_int_db_pk=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.business_int_db_pk ",$0)}'`
    hxestorage_business_int_db_opk=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.business_int_db_opk ",$0)}'`
    hxestorage_4K_seq_write=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rule.4K_seq_write ",$0)}'`
    hxestorage_4K_seq_read=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rule.4K_seq_read ",$0)}'`
    hxestorage_256K_seq_write=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rule.256K_seq_write ",$0)}'`
    hxestorage_256K_seq_read=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rule.256K_seq_read ",$0)}'`
    hxestorage_4K_rand_write=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:ssd.WR_IOPs ",$0)}'`
    hxestorage_4K_rand_read=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:ssd.RD_IOPs ",$0)}'`
    hxestorage_camss_cloud=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.camss_cloud ",$0)}'`
    hxestorage_camss_video_streaming=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.camss_video_streaming ",$0)}'`
    hxestorage_camss_med_imaging=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.camss_med_imaging ",$0)}'`
    hxestorage_cache_stress=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.cache_stress ",$0)}'`
    hxestorage_sync_cache=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart ${HTX_LOG_DIR}/mpath_parts 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.sync_cache ",$0)}'`
else
    hxestorage_default=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart  2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s: ",$0)}'`
    hxestorage_buster=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s: ",$0)}'`
    hxestorage_easytier=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:easytier ",$0)}'`
    hxestorage_cache=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:hd.cache ",$0)}'`
    hxestorage_comm_db_opk=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.comm_db_opk ",$0)}'`
    hxestorage_comm_db_pk=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.comm_db_pk ",$0)}'`
    hxestorage_app_server=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.app_server ",$0)}'`
    hxestorage_web_server=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.web_server ",$0)}'`
    hxestorage_hpc_comp_node=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.hpc_comp_node ",$0)}'`
    hxestorage_hpc_io_node=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.hpc_io_node ",$0)}'`
    hxestorage_business_int_db_pk=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.business_int_db_pk ",$0)}'`
    hxestorage_business_int_db_opk=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.business_int_db_opk ",$0)}'`
    hxestorage_4K_seq_write=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rule.4K_seq_write ",$0)}'`
    hxestorage_4K_seq_read=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rule.4K_seq_read ",$0)}'`
    hxestorage_256K_seq_write=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rule.256K_seq_write ",$0)}'`
    hxestorage_256K_seq_read=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rule.256K_seq_read ",$0)}'`
    hxestorage_4K_rand_write=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:ssd.WR_IOPs ",$0)}'`
    hxestorage_4K_rand_read=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:ssd.RD_IOPs ",$0)}'`
    hxestorage_camss_cloud=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.camss_cloud ",$0)}'`
    hxestorage_camss_video_streaming=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.camss_video_streaming ",$0)}'`
    hxestorage_camss_med_imaging=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.camss_med_imaging ",$0)}'`
    hxestorage_cache_stress=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.cache_stress ",$0)}'`
    hxestorage_sync_cache=`cat ${HTX_LOG_DIR}/rawpart ${HTX_LOG_DIR}/dvdwpart 2>> $HTXNoise | awk  '{sub(/ *$/, "", $0)} /./ { printf("%s:rules.sync_cache ",$0)}'`
fi

#Remove all storage mdts first and then create them fresh. This is to avoid stale storage mdts when system config changed and there are no more disks.
rm ${HTXMDT}/mdt.hd 2>/dev/null
rm ${HTXMDT}/mdt.hdbuster 2>/dev/null
rm ${HTXMDT}/mdt.easytier 2>/dev/null
rm ${HTXMDT}/mdt.hd.cache 2>/dev/null
rm ${HTXMDT}/mdt.comm_db_opk 2>/dev/null
rm ${HTXMDT}/mdt.hpc_io_node 2>/dev/null
rm ${HTXMDT}/mdt.business_int_db_opk 2>/dev/null
rm ${HTXMDT}/mdt.storage_4K_seq_write 2>/dev/null
rm ${HTXMDT}/mdt.storage_4K_seq_read 2>/dev/null
rm ${HTXMDT}/mdt.storage_256K_seq_write 2>/dev/null
rm ${HTXMDT}/mdt.storage_256K_seq_read 2>/dev/null
rm ${HTXMDT}/mdt.storage_4K_rand_write 2>/dev/null
rm ${HTXMDT}/mdt.storage_4K_rand_read 2>/dev/null
rm ${HTXMDT}/mdt.camss_cloud 2>/dev/null
rm ${HTXMDT}/mdt.camss_video_streaming 2>/dev/null
rm ${HTXMDT}/mdt.camss_med_imaging 2>/dev/null
rm ${HTXMDT}/mdt.storage_cache_stress 2>/dev/null
rm ${HTXMDT}/mdt.storage_sync_cache 2>/dev/null

if [ "$hxestorage_default" != "" ];
then
	echo "[devconfig]Creating storage exerciser specific mdts..." >> $HTXNoise
	create_my_mdt $hxestorage_default> ${HTXMDT}/mdt.hd
	create_my_mdt $hxestorage_buster> ${HTXMDT}/mdt.tmp
	cat ${HTXMDT}/mdt.tmp $* | \
	sed 's/default\.hdd/hdd\.buster/' | sed 's/default\.ssd/ssd\.buster/' > ${HTXMDT}/mdt.hdbuster
	rm ${HTXMDT}/mdt.tmp
	create_my_mdt $hxestorage_easytier> ${HTXMDT}/mdt.easytier
	create_my_mdt $hxestorage_cache> ${HTXMDT}/mdt.hd.cache
	create_my_mdt $hxestorage_comm_db_opk > ${HTXMDT}/mdt.comm_db_opk
	create_my_mdt $hxestorage_hpc_io_node > ${HTXMDT}/mdt.hpc_io_node
	create_my_mdt $hxestorage_business_int_db_opk > ${HTXMDT}/mdt.business_int_db_opk
	create_my_mdt $hxestorage_4K_seq_write > ${HTXMDT}/mdt.storage_4K_seq_write
	create_my_mdt $hxestorage_4K_seq_read > ${HTXMDT}/mdt.storage_4K_seq_read
	create_my_mdt $hxestorage_256K_seq_write > ${HTXMDT}/mdt.storage_256K_seq_write
	create_my_mdt $hxestorage_256K_seq_read > ${HTXMDT}/mdt.storage_256K_seq_read
	create_my_mdt $hxestorage_4K_rand_write > ${HTXMDT}/mdt.storage_4K_rand_write
	create_my_mdt $hxestorage_4K_rand_read > ${HTXMDT}/mdt.storage_4K_rand_read
	create_my_mdt $hxestorage_cache_stress > ${HTXMDT}/mdt.storage_cache_stress
	create_my_mdt $hxestorage_sync_cache > ${HTXMDT}/mdt.storage_sync_cache
fi

create_my_mdt fpu:$fpu_combo_rf >  ${HTXMDT}/mdt.bu_combo_char
#P9 and above shifts
if [ $proc_ver_dec -ge 78 ]; then
	echo "[devconfig]Creating P9(and above) specific mdts..." >> ${HTXNoise}
	#nest shifts
	create_my_mdt mem:default.mfg.nodelay > ${HTXMDT}/mdt.mem
	create_my_mdt mem:default.mfg tlbie:tlbie > ${HTXMDT}/mdt.mem_tlbie
	create_my_mdt sctu: cache:$cache_rf tlbie:tlbie > ${HTXMDT}/mdt.nest
	create_my_mdt cache:$cache_rf mem:rules.char_2 tlbie:tlbie > ${HTXMDT}/mdt.mem_nest
	create_my_mdt fpu:$fpu_combo_rf mem:rules.char_2 > ${HTXMDT}/mdt.bu_char
	create_my_mdt $hxestorage_default mem:default.mfg > ${HTXMDT}/mdt.mem.io
	create_my_mdt $hxestorage_default cache:$cache_rf sctu: tlbie:tlbie > ${HTXMDT}/mdt.nest.io
	create_my_mdt cache:rules.noprefetch.p9 > ${HTXMDT}/mdt.cache.noprefetch
	cp ${HTXMDT}/mdt.io ${HTXMDT}/mdt.inter_io

	#core shifts
	create_my_mdt fpu:mix_cover_p9 > ${HTXMDT}/mdt.fpu_cover
	create_my_mdt fpu:fp_stress_p9 > ${HTXMDT}/mdt.fpu_stress
	create_my_mdt fpu:thermal_p9 > ${HTXMDT}/mdt.fpu_thermal
	create_my_mdt fpu:flush_p9 > ${HTXMDT}/mdt.fpu_flush
	create_my_mdt fpu:dfu_p9 > ${HTXMDT}/mdt.fpu_dfu
	create_my_mdt fpu:vsu_p9 > ${HTXMDT}/mdt.fpu_vsu
	create_my_mdt fpu:pm_p9 > ${HTXMDT}/mdt.fpu_pm
	cat ${HTXMDT}mdt.all | create_mdt_without_devices.awk default cpu fpu sctu >> ${HTXMDT}/mdt.bu_combo_char
else
	if [ $true_pvr -ge 78 ]; then
		create_my_mdt mem:default.mfg.nodelay > ${HTXMDT}/mdt.mem
		create_my_mdt mem:default.mfg tlbie:tlbie > ${HTXMDT}/mdt.mem_tlbie
		create_my_mdt sctu: cache:$cache_rf tlbie:tlbie > ${HTXMDT}/mdt.nest
		create_my_mdt cache:$cache_rf mem:rules.char_2 tlbie:tlbie > ${HTXMDT}/mdt.mem_nest
		create_my_mdt fpu:$fpu_combo_rf mem:rules.char_2 > ${HTXMDT}/mdt.bu_char
		create_my_mdt $hxestorage_default mem:default.mfg > ${HTXMDT}/mdt.mem.io
		create_my_mdt $hxestorage_default cache:$cache_rf sctu: tlbie:tlbie > ${HTXMDT}/mdt.nest.io
		create_my_mdt cache:rules.noprefetch.p9 > ${HTXMDT}/mdt.cache.noprefetch
		cp ${HTXMDT}/mdt.io ${HTXMDT}/mdt.inter_io
	else		
		create_my_mdt mem:memmfg.nodelay > ${HTXMDT}/mdt.mem
		create_my_mdt mem:memmfg.nodelay tlbie: > ${HTXMDT}/mdt.mem_tlbie
		create_my_mdt sctu: cache:$cache_rf mem:memmfg tlbie:tlbie > ${HTXMDT}/mdt.nest
		create_my_mdt cache:$cache_rf mem:memmfg > ${HTXMDT}/mdt.mem_nest
		create_my_mdt fpu:$fpu_combo_rf mem:memmfg > ${HTXMDT}/mdt.bu_char
		create_my_mdt $hxestorage_default mem:memmfg > ${HTXMDT}/mdt.mem.io
		create_my_mdt $hxestorage_default mem:memmfg cache:$cache_rf sctu: tlbie:tlbie > ${HTXMDT}/mdt.nest.io
		create_my_mdt cache:rules.noprefetch > ${HTXMDT}/mdt.cache.noprefetch
		create_my_mdt cache:rules.l2_and_l3_bounce > ${HTXMDT}/mdt.cache.l2_and_l3_bounce
		cat ${HTXMDT}mdt.all | create_mdt_without_devices.awk default cpu fpu sctu >> ${HTXMDT}/mdt.bu_combo_char
	fi
fi

create_my_sctu_stanzas.awk CHARACTERIZATION >> ${HTXMDT}mdt.bu_combo_char

# P8 specific core, nest and IO workload/shifts
if [ $proc_ver_dec -ge 75 ]; then
	#core shifts
	create_my_mdt cpu:rules.thread_priority > ${HTXMDT}/mdt.thread_priority
	create_my_mdt cpu:rules.vsx.vmx fpu:rules.vsx.vmx> ${HTXMDT}/mdt.vsx.vmx
	create_my_mdt cpu:rules.unalign_shl_lhl > ${HTXMDT}/mdt.cpu.unalign_shl_lhl
	create_my_mdt cpu:rules.unalign > ${HTXMDT}/mdt.cpu.unalign
	create_my_mdt cpu:rules.branch > ${HTXMDT}/mdt.cpu.branch
	create_my_mdt cpu:rules.prefetch_n_sync sctu:rules.CacheBias cache:$cache_sw_prefetch_rf > ${HTXMDT}/mdt.prefetch_n_sync
	create_my_mdt sctu:rules.LwarxStwcx cpu:rules.larx_stcx > ${HTXMDT}/mdt.larx_stcx
	create_my_mdt cpu:rules.shl_lhl > ${HTXMDT}/mdt.cpu.shl_lhl
	create_my_mdt fpu:rules.interleaving > ${HTXMDT}/mdt.fpu.interleaving
	create_my_mdt fpu:rules.sao cpu:rules.sao sctu:rules.64.SAO > ${HTXMDT}/mdt.sao

	#nest shifts
	if [ $true_pvr -lt 78 ]; then
		create_my_mdt cache:rules.l2_bounce.p8 > ${HTXMDT}/mdt.cache.l2_bounce
		create_my_mdt cache:default.eco.p8 > ${HTXMDT}/mdt.cache.dynamic_eco
	else
		create_my_mdt cache:default.eco.p9 > ${HTXMDT}/mdt.cache.dynamic_eco
	fi
	create_shift_mem_L4test.awk L4 > ${HTXMDT}/mdt.l4
	create_shift_mem_L4test.awk rules.MBA > ${HTXMDT}/mdt.mba
	
	#CAMSS workloads
	if [ "$hxestorage_default" != "" ];
	then
		create_my_mdt $hxestorage_camss_cloud > ${HTXMDT}/mdt.camss_cloud
		create_my_mdt $hxestorage_camss_video_streaming > ${HTXMDT}/mdt.camss_video_streaming
		create_my_mdt $hxestorage_camss_med_imaging > ${HTXMDT}/mdt.camss_med_imaging
	fi
fi
 
# RNG Shifts for P7+ and above.
if [ $proc_ver_dec -ge 74  ]; 
then
	create_my_mdt rng:rules.default > ${HTXMDT}mdt.rng
	cp ${HTXMDT}mdt.io ${HTXMDT}mdt.ci
	cat ${HTXMDT}/mdt.rng | create_mdt_without_devices.awk default >> ${HTXMDT}mdt.ci
fi
 
#Following shifts should be created till P7+ only. Not in P8.
if [ $proc_ver_dec -lt 75 ]; 
then
    create_my_mdt fpu:p1_lock > ${HTXMDT}/mdt.fpu.p1_lock
    create_my_mdt fpu:xs_dfp > ${HTXMDT}/mdt.fpu.xs_dfp
fi

#Shifts for P6 & earlier
if [ $proc_ver_dec -le 62 ];
then
    create_my_mdt mem:memmfg.p6 > ${HTXMDT}/mdt.mem
fi

create_my_mdt $hxestorage_cache cache:$cache_rf sctu: > ${HTXMDT}/mdt.cache.io
create_my_mdt mem:rules.comm_db_pk $hxestorage_comm_db_pk cpu:rules.comm_db_pk  > ${HTXMDT}/mdt.comm_db_pk
create_my_mdt $hxestorage_app_server mem:rules.app_server > ${HTXMDT}/mdt.app_server #mdt for application or middleware server
create_my_mdt $hxestorage_web_server mem:rules.web_server > ${HTXMDT}/mdt.web_server #mdt for edge or webserver
create_my_mdt mem:rules.hpc_comp_node fpu:rules.hpc_comp_node $hxestorage_hpc_comp_node > ${HTXMDT}/mdt.hpc_comp_node # mdt for HPC compute node
create_my_mdt $hxestorage_business_int_db_pk cpu:rules.business_int_db_pk > ${HTXMDT}/mdt.business_int_db_pk

#Nest shifts
create_my_mdt mem:mem_16m_hwpf > ${HTXMDT}/mdt.mem.hw_prefetch
create_my_mdt cache:$cache_sw_prefetch_rf > ${HTXMDT}/mdt.cache.sw_prefetch
create_my_mdt mem:rules.dl1_reloads_from_caches > ${HTXMDT}/mdt.mem.dl1_reloads_from_caches
create_my_mdt mem:rules.max_cache_hit > ${HTXMDT}/mdt.mem.max_cache_hit
create_my_mdt mem:rules.max_cache_miss > ${HTXMDT}/mdt.mem.max_cache_miss

create_my_mdt sctu:rules.CacheBias > ${HTXMDT}/mdt.cachebias
create_my_mdt tlbie: > ${HTXMDT}/mdt.tlbie

# Create mdt.mem_nest having reduced sctu devices.
# sctu devices created are half compared to sctu devices in mdt.bu
echo "Creating mdt.mem_nest ..."
create_my_sctu_stanzas.awk MEM_NEST >> ${HTXMDT}/mdt.mem_nest

# Create mdt.bu.characterization having only 1 sctu server per gang.
# Number of sctu servers per gang is reduced to get optimum fmax results.
cat ${HTXMDT}mdt.bu | create_mdt_without_devices.awk default cpu fpu sctu mem >> ${HTXMDT}/mdt.bu_char
create_my_sctu_stanzas.awk CHARACTERIZATION >> ${HTXMDT}mdt.bu_char

cat ${HTXMDT}mdt.all | create_mdt_without_devices.awk sctu > ${HTXMDT}mdt.bu.characterization
create_my_sctu_stanzas.awk CHARACTERIZATION >> ${HTXMDT}mdt.bu.characterization
echo >> ${HTXMDT}mdt.bu.characterization

if [[ "$shared_proc_mode" = "no" ]];
then
    num_nodes=`awk -F : '/Number of nodes/ {print $2}' ${HTX_LOG_DIR}/htx_syscfg`
    if [ $num_nodes -gt 1 ]
    then
        echo "Creating mdt.sctu.InterNode ..."
        cat ${HTXMDT}mdt.all | create_mdt_with_devices.awk > ${HTXMDT}mdt.sctu.InterNode
        create_my_sctu_stanzas.awk INTERNODE >> ${HTXMDT}mdt.sctu.InterNode
    fi

    #Background for SCTU chip and node mdts
    ${HTXBIN}/hxesctu SCTU_DEV
    create_my_mdt default > ${HTXMDT}/mdt.sctu.chip
    cp ${HTXMDT}/mdt.sctu.chip ${HTXMDT}/mdt.sctu.node

    # Creating sctu devices in chip and node mdts.
    echo "Creating mdt.sctu.chip ..."
    create_my_sctu_stanzas.awk CHIP >> ${HTXMDT}/mdt.sctu.chip
    echo "Creating mdt.sctu.node ..."
    create_my_sctu_stanzas.awk NODE >> ${HTXMDT}/mdt.sctu.node
fi


create_my_mdt fpu: cpu: > ${HTXMDT}/mdt.core
# assuming core.GB (which is derived out of mdt.core_wo_cpu) does not run on P7 system. (hardcoding rulefile to fpu_cpu_combo.p8)
create_my_mdt fpu:$fpu_combo_rf > ${HTXMDT}/mdt.core_wo_cpu

# Core shifts
create_my_mdt fpu: > ${HTXMDT}/mdt.fpu
create_my_mdt fpu:bypass_mix1 > ${HTXMDT}/mdt.fpu.bypass_mix1
create_my_mdt fpu:bypass_mix2 > ${HTXMDT}/mdt.fpu.bypass_mix2
create_my_mdt fpu:data_security > ${HTXMDT}/mdt.fpu.data_security
create_my_mdt fpu:fpscr_bfu > ${HTXMDT}/mdt.fpu.fpscr_bfu
create_my_mdt fpu:fpscr_vsx > ${HTXMDT}/mdt.fpu.fpscr_vsx
create_my_mdt fpu:vsx_rounding > ${HTXMDT}/mdt.fpu.vsx_rounding
create_my_mdt fpu:rules.multi > ${HTXMDT}/mdt.fpu.multi
create_my_mdt fpu:stress > ${HTXMDT}/mdt.fpu.stress
create_my_mdt fpu:vscr > ${HTXMDT}/mdt.fpu.vscr
# Create mdt mdt.eq_cpu_mem_100 for 90% mem and 100% cpu usage.
# Naming convention shows that it is a equaliser mdt. But, actually
# it is not. name is kept like this so as not to break anything at
# custome location. 
create_my_mdt mem:mem.eq.90 cpu: > ${HTXMDT}/mdt.eq_cpu_mem_100

# Append hxecom stanza's if possible to IO mdt's.
# First Check if Netperf module is present.

if [[ $CMVC_RELEASE == "htxltsbml"  || $CMVC_RELEASE == "htxfedora" ]];
then
	if [ -f ${HTXSCRIPTS}/netup_the_great ];
	then
		# Lets try building networks.
		rm ${HTX_LOG_DIR}/mdt.nets 2>/dev/null
		echo "Building Networks. Please wait ..."
		${HTXSCRIPTS}/netup_the_great &>/dev/null
		# Check if mdt.nets is created.
		if [ -f ${HTX_LOG_DIR}/mdt.nets ];
		then
			echo "Appending hxecom stanza's to HTX IO mdt's . "
			echo  >> ${HTXMDT}/mdt.io
			cat ${HTX_LOG_DIR}/mdt.nets >> ${HTXMDT}/mdt.io

			echo  >> ${HTXMDT}/mdt.cache.io
			cat ${HTX_LOG_DIR}/mdt.nets >> ${HTXMDT}/mdt.cache.io

			echo  >> ${HTXMDT}/mdt.mem.io
			cat ${HTX_LOG_DIR}/mdt.nets >> ${HTXMDT}/mdt.mem.io

			echo  >> ${HTXMDT}/mdt.nest.io
			cat ${HTX_LOG_DIR}/mdt.nets >> ${HTXMDT}/mdt.nest.io
		fi
	fi
fi

if [[ -f ${HTX_HOME_DIR}/.internal ]];
then
	${HTXSCRIPTS}/devconfig_internal
fi

if [[ $BTF_SHIFT_ENV -ne 1 ]];
then
	mv ${HTXMDT}/mdt.everything ${HTXMDT}/mdt.all    
fi

#Append inter_node fabric link test stanza in mdt.bu_char

if [ $true_pvr -ge 78 ]; then
    if [[ $num_nodes -gt 1 ]]
    then
		echo                                                                                          | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
		echo "fabn:"                                                                                  | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
		echo -e "\tHE_name = \"hxefabricbus\"                     "                                   | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
		echo -e "\tadapt_desc = \"Node to Node\"                  "                                   | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
		echo -e "\tdevice_desc = \"Memory BW\"                    "                                   | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
		echo -e "\treg_rules = \"hxefabricbus/default.char\"        "                                 | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
		echo -e "\temc_rules = \"hxefabricbus/default.char\"        "                                 | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
		echo -e "\tcont_on_err = \"NO\"                         "                                     | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
		echo                                                                                          | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
    fi
	 
    if [[ -f ${HTXMDT}mdt.inter_chip ]]
    then
        echo                                                                                          | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
        echo "fabc:"                                                                                  | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
        echo -e "\tHE_name = \"hxefabricbus\"                     "                                   | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
        echo -e "\tadapt_desc = \"Chip to Chip\"                  "                                   | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
        echo -e "\tdevice_desc = \"Memory BW\"                    "                                   | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
        echo -e "\treg_rules = \"hxefabricbus/default.inter_chip\"        "                                 | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
        echo -e "\temc_rules = \"hxefabricbus/default.inter_chip\"        "                                 | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
        echo -e "\tcont_on_err = \"NO\"                         "                                     | tee -a ${HTXMDT}/mdt.bu_char ${HTXMDT}/mdt.nest.io ${HTXMDT}/mdt.inter_io > /dev/null
        echo                            
	fi

    if [[ -f ${HTXMDT}/mdt.bw_bi ]];
    then
        cat ${HTXMDT}/mdt.bw_bi | create_mdt_without_devices.awk default >> ${HTXMDT}/mdt.inter_io
    fi
    
    cp ${HTXMDT}/mdt.mem_nest ${HTXMDT}/mdt.mem_nest_inter_io
    cat ${HTXMDT}/mdt.inter_io | create_mdt_without_devices.awk default >> ${HTXMDT}/mdt.mem_nest_inter_io
fi

# Removing temp mdts created earlier for core.GB
rm -f ${HTXMDT}/mdt.core_wo_cpu
echo "exiting devconfig..." >> $HTXNoise
