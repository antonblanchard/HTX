* It considers less memory as low as one 4k and 64K page per thread, accesses same
* memory on next read opeartions to maximize cache hits
****************************************************************
*******Global Rules**********
global_startup_delay = 0
global_alloc_mem_percent = 30
global_alloc_huge_page = no
global_disable_filters = no
*********************************
rule_id = l2_hit
pattern_id = HEXFF(8) HEXZEROS(8) 0x5555555555555555 0xAAAAAAAAAAAAAAAA 0xCCCCCCCCCCCCCCCC 0x3333333333333333 0x0F0F0F0F0F0F0F0F 0x3C3C3C3C3C3C3C3C 0x5A5A5A5A5A5A5A5A
num_oper = 10
num_writes = 1
num_read_only = 0
num_read_comp = 1000
switch_pat_per_seg = all
oper = mem
width = 8
affinity = local
disable_cpu_bind = NO
cpu_filter = N*P*C*T%50
mem_filter = N*P*[4K_#64,64K_#64]
seg_size_4k = 4096
seg_size_64k = 65536

rule_id = l3_hit
pattern_id = HEXFF(8) HEXZEROS(8) 0x5555555555555555 0xAAAAAAAAAAAAAAAA 0xCCCCCCCCCCCCCCCC 0x3333333333333333 0x0F0F0F0F0F0F0F0F 0x3C3C3C3C3C3C3C3C 0x5A5A5A5A5A5A5A5A
num_oper = 10
num_writes = 1
num_read_only = 0
num_read_comp = 1000
switch_pat_per_seg = all
oper = mem
width = 8
cpu_filter = N*P*C*T*
mem_filter = N*P*[4K_#128,64K_#128]
seg_size_4k = 4096
seg_size_64k = 65536
