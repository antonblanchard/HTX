README for hxefabricbus exerciser
==================================

Goal: 
-----
To create a test configuration within HTX that will maximize fabric bus data
and address bandwidth utilization with data integrity checks.

Features:
---------
1) Supports testing of inter node fabric buses(popularly know as A,B buses).
2) Supports testing of intra node fabric buses(popularly know as X, Y Z buses). 
3) Supports various fixed/random data patterns and various memory operations
   (WRC,stride,rim etc)
4) Supports data pusher (compare=off) mode.
		
Hardware supported & HW test scope:
-----------------------------------
HTX fabricbus exerciser is supported on P6 and later systems. 
Currnetly exerciser aims at intra node and inter node fabric bus stress test. 

Supported OS:
-------------
AIX   : y
Linux : y
BML   : y

General info:
------------
HTX fabricbus test program runs as user application on top of OS (AIX and BML).
In case of miscompare, exerciser traps to KDB.
HTX setup scripts should create 3 mdt files as described below : 
1)mdt.inter_node: Should be used for Inter Node(A, B) stress test. 
2)mdt.inter_chip: Should be used for Intra Node(X, Y, Z) bus stress test. 
3)mdt.mem_inter_node : Should be used for InterNode bus and memory stress test simultaneouly.  

Prerequisites:
--------------
1) Supported on P6 and later hardware.
2) OS Level : AIX/LINUX/BML with P6 support and onwards.
3) For best results ensure that system is configured as a full system lpar. If
   the system is configured with multiple dedicated lpars throughput may be 
   compromised depending on the config of the lpar. 
4) For inter node stress test system should have min 2 cec-nodes or higher.
5) For intra node stress test system should have min 2 h/w chips per cec-node.
6) For best results, while testing intra node buses (XYZ) ensure that memory
   controllers across chips should not be grouped. While testing inter node
   buses (AB), ensure that memory controllers are not grouped across the CEC
   nodes.

Brief description :
------------------
As mentioned above, goal of this exer is to maximize fabric bus data and 
address bandwidth utilization. To achieve its goal, exer needs to push
large amount of data on the fabric buses under test. Inter node buses come
into play when processor accesses a data which is present behind the memory
controller of a remote CEC node. Similarly intra node buses come into play
when processor accesses a data which is behind the memory controller of a remote
chip of the same CEC node. To push large amount of data on the fabric buses
hxefabricbus exer performs write/read/compare ops on remote memory (be it a
remote chip or remote CEC node). To access remote memory consistently exer
needs to overflow the local L3 cache hence on every access to the memory set
fabric bus needs to perform a transaction to bring data from remote memory
to local cache. To achieve the L3 cache overflow, exerciser creates a memory
set double the size of total chip L3 cache for all threads from that chip 
which performs write/read ops.
Exerciser creates one or more cpu bound threads
to push data on fabric bus under test. For each such thread exer also creates
a memory set on the remote end of the fabric bus. Each of such thread performs
write/read/compare ops num_oper times on the remote memory set.

Creation of threads to perform write/read/compare ops and allocating memory set
for all such threads is done by exerciser after detecting the hardware
configuration.Exerciser is capable of auto-detecting system's hardware
configuration. It does so by reading PIR register of each available logical
processor to determine which CEC node/chip it belongs to. Exerciser has a
capability to control the no of threads per node that pushes data on a given
inter node (AB bus)fabric bus. This can be controlled using rule file parameters
cpu_filetr, utilisation varies with no of threads pushing the data.

Exerciser supports different algorithms to perform memory ops like a simple
memory walk over, strided memory access, RIM etc. Exerciser supports different
types of data patterns inlcuding random data pattern, address pattern.

Understanding htxstats:
-----------------------
fabc:
  cycles                              =                  0
  # good reads                        =                  0
  # bytes read                        =      10322013376512  <-- Date Read from Remote Memory
  # good writes                       =                  0
  # total instructions                =                  0
  # bytes written                     =       7553061727744  <--Date written to remote Memory.
  # good others                       =                  0
  # bad others                        =                  0
  # bad reads                         =                  0
  # bad writes                        =                  0
  # data transfer rate(bytes_wrtn/s)  =        371234912.00  <--Number of bytes written per second
  # data transfer rate(bytes_read/s)  =        506372864.00  <--Number of bytes read per second
  # instruction throughput(MIPS)      =           0.000000



Log Files Created by exerciser : 
-------------------------------

1)$HTX_LOG_DIR/htx/hxefabricbus/<dev>/<dev>_cpu_to_mem_map : Contains cpu to memory details derived by exerciser.
2)$HTX_LOG_DIR/htx/hxefabricbus/<dev>//mem_segment_details : Logs detailed information of threads and associated memory details.

<dev> = fabc(for intra node test)  or fabn(for inter node test case). 

Throughput Nos:
--------------
As observed using various performance measurement tools(buz and perfmon) on P8 :
1)mdt.inter_node is able to drive ~95% of max traffic on InterNode fabricbuses
2)mdt.inter_chip is able to drive ~95% of max traffic on IntraNode fabricbuses.
 
Limitations:
------------
1.Exerciser does not support DR operations.
   

List of rules:
--------------
default.inter_node
default.inter_chip

HXEFABRICBUS Rule file Readme
==============================

hxefabricbus exerciser is derived from htx nest framework , Rule parameters are same as that of hxemem64(memory exerciser).
please look into the read me of hxemem64 for detailed explaination of rules. 

#ls $HTXREGRULES/hxemem64/hxemem64.readme
/usr/lpp/htx/rules/reg//hxemem64/hxemem64.readme
		
		
