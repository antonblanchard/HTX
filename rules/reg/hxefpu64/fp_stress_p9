* Rule file	for	hxefpu64 exerciser running on P9 and above.
*
* This Rule	file is	for	"stress" shift. Instruction biasing is shown below.
*
* For details of rule keywords,	please refer hxefpu64.readme
* in ${HTX_HOME_DIR}/rules/reg/hxefpu64 dir on test machine.
*
* NOTE:	Rule keyword & associated value	should be all in one
*	line _only_. Currently '\n'	(newline) is used as
*	delimiter to differentiate between keywords.
*

* 1) stress = Sq rt / Div/ Mul/ Mul add in BFU and DFU.	
* 
* BFP multiply and add-multiply instructions
* BFP_ELEM_ARITH_DP                   0x0200000000000080
* BFP_ELEM_ARITH_SP                   0x0200000000000040
* BFP_ADD_MUL_DP                      0x0200000000000200
* BFP_ADD_MUL_SP                      0x0200000000000100
* BFP_RECIPR_ARITH_SP                 0x0200000000400000
* BFP_RECIPR_ARITH_DP                 0x0200000000800000
* BFP_TEST_ONLY                       0x0200000000040000
* P9_BFP_TEST_ONLY                    0x0210000000040000
* 
* DFP multiply instructions
* DFP_AIRTH_LONG	                  0x0300000000000002
* DFP_AIRTH_QUAD	                  0x0300000000000001
*
* VMX Multiply and add-multiply instructions.
* VMX_INT_ARITHMETIC_SIGNED_ONLY      0x0400000000000008
* VMX_INT_ARITHMETIC_UNSIGNED_ONLY    0x0400000000000010
* VMX_INT_MUL_ADD_SIGNED_ONLY         0x0400000000000020
* VMX_INT_MUL_ADD_UNSIGNED_ONLY       0x0400000000000040
* VMX_FP_MUL_ADD_SUB_ONLY             0x0400000000040000
* P9_VMX_DFP_ARITHMETIC               0x0400000002000000
*
* VSX multiply and add-multiply instructions
* VSX_VECTOR_DP_FP_ARITHMETIC_ONLY   0x0100000000080000
* VSX_VECTOR_SP_FP_ARITHMETIC_ONLY   0x0100000000040000
* VSX_SCALAR_DP_FP_MUL_ADD_ONLY      0x0100000000000010
* VSX_VECTOR_DP_FP_MUL_ADD_ONLY      0x0100000000200000
* VSX_VECTOR_SP_FP_MUL_ADD_ONLY      0x0100000000100000
*
* Final : 0x01000000003C0010, 0x0200000000C403C0, 0x0300000000000003, 0x0400000002040078

* Stress shifts with 100% normal data

rule_id						stress_norm1
num_oper					1000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa, 0xa, 0xa,	0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x01000000003C0010,25)(0x0200000000C403C0,25)(0x0300000000000003,25)(0x0400000002040078,25):(0x01000000003C0010,70)(0x0200000000C403C0,10)(0x0300000000000003,10)(0x0400000002040078,10):(0x01000000003C0010,10)(0x0200000000C403C0,70)(0x0300000000000003,10)(0x0400000002040078,10):(0x01000000003C0010,10)(0x0200000000C403C0,10)(0x0300000000000003,70)(0x0400000002040078,10):(0x01000000003C0010,10)(0x0200000000C403C0,10)(0x0300000000000003,10)(0x0400000002040078,70):(0x01000000003C0010,40)(0x0200000000C403C0,10)(0x0300000000000003,10)(0x0400000002040078,40):(0x01000000003C0010,10)(0x0200000000C403C0,40)(0x0300000000000003,40)(0x0400000002040078,10):(0x01000000003C0010,25)(0x0200000000C403C0,25)(0x0300000000000003,25)(0x0400000002040078,25)]


* Stress shifts with 50/50% normal/denormal data

rule_id						stress_n_dn2
num_oper					1000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,20,20,20,20,20,20,20]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x01000000003C0010,25)(0x0200000000C403C0,25)(0x0300000000000003,25)(0x0400000002040078,25):(0x01000000003C0010,70)(0x0200000000C403C0,10)(0x0300000000000003,10)(0x0400000002040078,10):(0x01000000003C0010,10)(0x0200000000C403C0,70)(0x0300000000000003,10)(0x0400000002040078,10):(0x01000000003C0010,10)(0x0200000000C403C0,10)(0x0300000000000003,70)(0x0400000002040078,10):(0x01000000003C0010,10)(0x0200000000C403C0,10)(0x0300000000000003,10)(0x0400000002040078,70):(0x01000000003C0010,40)(0x0200000000C403C0,10)(0x0300000000000003,10)(0x0400000002040078,40):(0x01000000003C0010,10)(0x0200000000C403C0,40)(0x0300000000000003,40)(0x0400000002040078,10):(0x01000000003C0010,25)(0x0200000000C403C0,25)(0x0300000000000003,25)(0x0400000002040078,25)]


* Stress shifts with 100% denormal	data

rule_id						stress_denorm3
num_oper					1000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[30,30,30,30,30,30,30,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa0, 0xa0, 0xa0, 0xa0,0xa0, 0xa0, 0xa0, 0xa0]
INS_BIAS_MASK				[(0x01000000003C0010,25)(0x0200000000C403C0,25)(0x0300000000000003,25)(0x0400000002040078,25):(0x01000000003C0010,70)(0x0200000000C403C0,10)(0x0300000000000003,10)(0x0400000002040078,10):(0x01000000003C0010,10)(0x0200000000C403C0,70)(0x0300000000000003,10)(0x0400000002040078,10):(0x01000000003C0010,10)(0x0200000000C403C0,10)(0x0300000000000003,70)(0x0400000002040078,10):(0x01000000003C0010,10)(0x0200000000C403C0,10)(0x0300000000000003,10)(0x0400000002040078,70):(0x01000000003C0010,40)(0x0200000000C403C0,10)(0x0300000000000003,10)(0x0400000002040078,40):(0x01000000003C0010,10)(0x0200000000C403C0,40)(0x0300000000000003,40)(0x0400000002040078,10):(0x01000000003C0010,25)(0x0200000000C403C0,25)(0x0300000000000003,25)(0x0400000002040078,25)]


* Stress shifts with mix data corners

rule_id						stress_all4
num_oper					1000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,20,20,20,20,20,20,20]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x01000000003C0010,25)(0x0200000000C403C0,25)(0x0300000000000003,25)(0x0400000002040078,25):(0x01000000003C0010,70)(0x0200000000C403C0,10)(0x0300000000000003,10)(0x0400000002040078,10):(0x01000000003C0010,10)(0x0200000000C403C0,70)(0x0300000000000003,10)(0x0400000002040078,10):(0x01000000003C0010,10)(0x0200000000C403C0,10)(0x0300000000000003,70)(0x0400000002040078,10):(0x01000000003C0010,10)(0x0200000000C403C0,10)(0x0300000000000003,10)(0x0400000002040078,70):(0x01000000003C0010,40)(0x0200000000C403C0,10)(0x0300000000000003,10)(0x0400000002040078,40):(0x01000000003C0010,10)(0x0200000000C403C0,40)(0x0300000000000003,40)(0x0400000002040078,10):(0x01000000003C0010,25)(0x0200000000C403C0,25)(0x0300000000000003,25)(0x0400000002040078,25)]

* Stress shifts with 50% norm and 50% denorm data with varying FPSCR. 

rule_id						stress_fpscr5
num_oper					1000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,20,20,20,20,20,20,20]
fpscr						[0xf8,0xf9,0xfa,0xfb,0xf8,0xf9,0xfa,0xfb]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x01000000003C0010,25)(0x0200000000C403C0,25)(0x0300000000000003,25)(0x0400000002040078,25):(0x01000000003C0010,70)(0x0200000000C403C0,10)(0x0300000000000003,10)(0x0400000002040078,10):(0x01000000003C0010,10)(0x0200000000C403C0,70)(0x0300000000000003,10)(0x0400000002040078,10):(0x01000000003C0010,10)(0x0200000000C403C0,10)(0x0300000000000003,70)(0x0400000002040078,10):(0x01000000003C0010,10)(0x0200000000C403C0,10)(0x0300000000000003,10)(0x0400000002040078,70):(0x01000000003C0010,40)(0x0200000000C403C0,10)(0x0300000000000003,10)(0x0400000002040078,40):(0x01000000003C0010,10)(0x0200000000C403C0,40)(0x0300000000000003,40)(0x0400000002040078,10):(0x01000000003C0010,25)(0x0200000000C403C0,25)(0x0300000000000003,25)(0x0400000002040078,25)]


* 2) xs*qp 128b instructions - quad precision binary floating point: new in P9	
* P9_BFP_ELEM_ARITH_QP         0x0210000000100000
* P9_BFP_COMPARE_ONLY          0x0210000000008000
* P9_BFP_CONV_ONLY             0x0210000000080000
* P9_BFP_MOVE_ONLY             0x0210000000000400
* P9_BFP_ADD_MUL_QP            0x0210000000200000
* P9_BFP_ROUND_2_INT           0x0210000000001000
*
* Final : 0x0210000000389400

* Stress BFP_QP shifts with 100% normal data

rule_id						bfpqp_norm6
num_oper					1000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa, 0xa, 0xa,	0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100)]


* Stress BFP_QP shifts with 50/50% normal/denormal data

rule_id						bfpqp_n_dn7
num_oper					1000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,20,20,20,20,20,20,20]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100)]


* Stress BFP_QP shifts with 100% denormal data

rule_id						bfpqp_denorm8
num_oper					1000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[30,30,30,30,30,30,30,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa0, 0xa0, 0xa0, 0xa0,0xa0, 0xa0, 0xa0, 0xa0]
INS_BIAS_MASK				[(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100)]


* Stress BFP_QP shifts with mix data corners

rule_id						bfpqp_all9
num_oper					1000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,20,20,20,20,20,20,20]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100)]

* Stress BFP_QP shifts with 50% norm and 50% denorm data with varying FPSCR. 

rule_id						bfpqp_fpscr10
num_oper					1000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,20,20,20,20,20,20,20]
fpscr						[0xf8,0xf9,0xfa,0xfb,0xf8,0xf9,0xfa,0xfb]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100):(0x0210000000389400,100)]


* 3)Universal Multiplier inst  are new in P9 (DP and FXU).	
* BFP_ELEM_ARITH_DP	0x0200000000000080
* BFP_ELEM_ARITH_SP	0x0200000000000040
* DFP_AIRTH_LONG	0x0300000000000002
* CPU_FIXED_ARTH	0x0500000000000004
* VMX_INT_ARITHMETIC_SIGNED_ONLY	0x0400000000000008
* VMX_INT_ARITHMETIC_UNSIGNED_ONLY	0x0400000000000010
* VSX_SCALAR_DP_FP_ARITHMETIC_ONLY	0x0100000000000008
* VSX_VECTOR_SP_FP_ARITHMETIC_ONLY	0x0100000000040000
* VSX_VECTOR_DP_FP_ARITHMETIC_ONLY	0x0100000000080000
*
* Final : 0x01000000000C0008, 0x02000000000000C0, 0x0300000000000002, 0x0400000000000018, 0x0500000000000004

* Multiply stress shifts with 100% normal data

rule_id						mult_norm11
num_oper					1000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa, 0xa, 0xa,	0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x01000000000C0008,20)(0x02000000000000C0,20)(0x0300000000000002,20)(0x0400000000000018,20)(0x0500000000000004,20):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,60):(0x01000000000C0008,60)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,60)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,60)(0x0400000000000018,10)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,60)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,60):(0x01000000000C0008,20)(0x02000000000000C0,20)(0x0300000000000002,20)(0x0400000000000018,20)(0x0500000000000004,20)]


* Multiply stress shifts with 50/50% normal/denormal data

rule_id						mult_n_dn12
num_oper					1000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,20,20,20,20,20,20,20]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x01000000000C0008,20)(0x02000000000000C0,20)(0x0300000000000002,20)(0x0400000000000018,20)(0x0500000000000004,20):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,60):(0x01000000000C0008,60)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,60)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,60)(0x0400000000000018,10)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,60)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,60):(0x01000000000C0008,20)(0x02000000000000C0,20)(0x0300000000000002,20)(0x0400000000000018,20)(0x0500000000000004,20)]


* Multiply stress shifts with 100% denormal	data

rule_id						mult_denorm13
num_oper					1000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[30,30,30,30,30,30,30,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa0, 0xa0, 0xa0, 0xa0,0xa0, 0xa0, 0xa0, 0xa0]
INS_BIAS_MASK				[(0x01000000000C0008,20)(0x02000000000000C0,20)(0x0300000000000002,20)(0x0400000000000018,20)(0x0500000000000004,20):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,60):(0x01000000000C0008,60)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,60)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,60)(0x0400000000000018,10)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,60)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,60):(0x01000000000C0008,20)(0x02000000000000C0,20)(0x0300000000000002,20)(0x0400000000000018,20)(0x0500000000000004,20)]


* Multiply stress shifts with mix data corners

rule_id						mult_all14
num_oper					1000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,20,20,20,20,20,20,20]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x01000000000C0008,20)(0x02000000000000C0,20)(0x0300000000000002,20)(0x0400000000000018,20)(0x0500000000000004,20):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,60):(0x01000000000C0008,60)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,60)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,60)(0x0400000000000018,10)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,60)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,60):(0x01000000000C0008,20)(0x02000000000000C0,20)(0x0300000000000002,20)(0x0400000000000018,20)(0x0500000000000004,20)]

* Multiply stress shifts with 50% norm and 50% denorm data with varying FPSCR. 

rule_id						mult_fpscr15
num_oper					1000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,20,20,20,20,20,20,20]
fpscr						[0xf8,0xf9,0xfa,0xfb,0xf8,0xf9,0xfa,0xfb]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x01000000000C0008,20)(0x02000000000000C0,20)(0x0300000000000002,20)(0x0400000000000018,20)(0x0500000000000004,20):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,60):(0x01000000000C0008,60)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,60)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,60)(0x0400000000000018,10)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,60)(0x0500000000000004,10):(0x01000000000C0008,10)(0x02000000000000C0,10)(0x0300000000000002,10)(0x0400000000000018,10)(0x0500000000000004,60):(0x01000000000C0008,20)(0x02000000000000C0,20)(0x0300000000000002,20)(0x0400000000000018,20)(0x0500000000000004,20)]

