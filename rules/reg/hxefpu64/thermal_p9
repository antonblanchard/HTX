* P9 FPU rulefile for thermal stress. 
*
* 70% Vector load, 10% Vectore store, 10% Fixed point Multiply, 10% Floating add-multiply
*
* 4) Thermal stress for P9. (Fixed point divide, vector floating point multiply-add, vectore load)	
* CPU_FIXED_ARTH                      0x0500000000000004
* VSX_VECTOR_DP_FP_MUL_ADD_ONLY       0x0100000000200000
* VSX_VECTOR_SP_FP_MUL_ADD_ONLY       0x0100000000100000
* VMX_LOAD_ONLY                       0x0400000000000001
* VMX_STORE_ONLY                      0x0400000000000002
*
* Final : 0x0500000000000004, 0x0100000000300000, 0x0400000000000001, 0x0400000000000002

* Thermal stress with 100% normal data
rule_id						therm_norm1
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa, 0xa, 0xa,	0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10)]

* Thermal stress with 50% norm and 50% denorm data
rule_id						therm_ndn2
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10)]

* Thermal stress with 100% denormal data
rule_id						therm_denorm3
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0]
INS_BIAS_MASK				[(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10)]

* Thermal stress with all data corners 
rule_id						therm_all4
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10)]

* Thermal stress with 50% normal and 50% denormal data with varying FPSCR.
rule_id						therm_fpscr5
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0xf8,0xf9,0xfa,0xfb,0xf8,0xf9,0xfa,0xfb]
DATA_BIAS_MASK				[0xa, 0xa, 0xa,	0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10):(0x0500000000000004,10)(0x0100000000300000,10)(0x0400000000000001,70)(0x0400000000000002,10)]
