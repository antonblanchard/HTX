* P9 FPU rulefile for stressing VSU instructions
*
* P9_CPU_FIXED_ARTH
* CPU_FIXED_ARTH 
* BFP_ELEM_ARITH_DP
* BFP_ELEM_ARITH_SP
* BFP_ADD_MUL_DP
* BFP_ADD_MUL_SP
* BFP_CONV_FROM_INT
* BFP_CONV_2_INT
* BFP_ROUND_2_INT
* BFP_ROUND_2_SP
* BFP_SELECT_ONLY
* BFP_RECIPR_ARITH_SP
* BFP_RECIPR_ARITH_DP
* P9_VMX_DFP_ARITHMETIC
* VMX_FP_MUL_ADD_SUB_ONLY
* VMX_FP_ROUND_CONV_ONLY
* VMX_FP_ARITHMETIC_ONLY
* VMX_INT_ARITHMETIC_SIGNED_ONLY
* VMX_INT_ARITHMETIC_UNSIGNED_ONLY
* VMX_INT_SUM_ACROSS_SIGNED_ONLY
* VMX_INT_SUM_ACROSS_UNSIGNED_ONLY
* VMX_INT_MUL_ADD_SIGNED_ONLY
* VMX_INT_MUL_ADD_UNSIGNED_ONLY
* VMX_FP_ESTIMATE_ONLY
* VSX_SCALAR_DP_FP_MUL_ADD_ONLY
* VSX_VECTOR_SP_FP_MUL_ADD_ONLY
* VSX_VECTOR_DP_FP_MUL_ADD_ONLY
* VSX_SCALAR_DP_FP_ARITHMETIC_ONLY
* VSX_VECTOR_DP_FP_ARITHMETIC_ONLY
* VSX_VECTOR_SP_FP_ARITHMETIC_ONLY
* VSX_SCALAR_DP_CONV_SP_ONLY
* VSX_SCALAR_SP_CONV_DP_ONLY
* VSX_SCALAR_DP_CONV_FP2INT_ONLY
* VSX_SCALAR_DP_CONV_INT2FP_ONLY
* VSX_SCALAR_CONV_HP_DP_ONLY
* VSX_VECTOR_CONV_HP_SP_ONLY
* VSX_SCALAR_DP_RND_2_FPINT_ONLY
* VSX_VECTOR_DP_CONV_SP_ONLY
* VSX_VECTOR_DP_CONV_FP2INT_ONLY
* VSX_VECTOR_SP_CONV_FP2INT_ONLY
* VSX_VECTOR_SP_CONV_DP_ONLY
* VSX_VECTOR_DP_CONV_INT2FP_ONLY
* VSX_VECTOR_SP_CONV_INT2FP_ONLY
* VSX_VECTOR_DP_RND_2_FPINT_ONLY
* VSX_VECTOR_SP_RND_2_FPINT_ONLY"
*
* Final : 0x0110006000000000, 0x0410000002000000, 0x0510000000000004 (P9)
*         0x01000063FC3C0F98, 0x0200000000C17BC0, 0x04000000025601F8, 0x0500000000000004


* P9 only VSU instructions with 100% normal data
rule_id						vsu_p9_norm1
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa, 0xa, 0xa,	0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x0110006000000000,35)(0x0410000002000000,35)(0x0510000000000004,30):(0x0110006000000000,60)(0x0410000002000000,20)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,60)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,20)(0x0510000000000004,60):(0x0110006000000000,35)(0x0410000002000000,35)(0x0510000000000004,30):(0x0110006000000000,60)(0x0410000002000000,20)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,60)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,20)(0x0510000000000004,60)]

* P9 only VSU instructions with 100% denormal data
rule_id						vsu_p9_denorm2
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0]
INS_BIAS_MASK				[(0x0110006000000000,35)(0x0410000002000000,35)(0x0510000000000004,30):(0x0110006000000000,60)(0x0410000002000000,20)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,60)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,20)(0x0510000000000004,60):(0x0110006000000000,35)(0x0410000002000000,35)(0x0510000000000004,30):(0x0110006000000000,60)(0x0410000002000000,20)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,60)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,20)(0x0510000000000004,60)]

* P9 only VSU instructions with 50% norm and 50% denormal data
rule_id						vsu_p9_ndn3
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x0110006000000000,35)(0x0410000002000000,35)(0x0510000000000004,30):(0x0110006000000000,60)(0x0410000002000000,20)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,60)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,20)(0x0510000000000004,60):(0x0110006000000000,35)(0x0410000002000000,35)(0x0510000000000004,30):(0x0110006000000000,60)(0x0410000002000000,20)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,60)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,20)(0x0510000000000004,60)]

* P9 only VSU instructions with all data corners and unaligned load store
rule_id						vsu_p9_all4
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x0110006000000000,35)(0x0410000002000000,35)(0x0510000000000004,30):(0x0110006000000000,60)(0x0410000002000000,20)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,60)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,20)(0x0510000000000004,60):(0x0110006000000000,35)(0x0410000002000000,35)(0x0510000000000004,30):(0x0110006000000000,60)(0x0410000002000000,20)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,60)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,20)(0x0510000000000004,60)]

* P9 only VSU instructions with 50% norm and 50% denormal data and varying FPSCR settings for each thread (all exceptions enabled and varying rounding mode)
rule_id						vsu_p9_fpscr5
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0xf8,0xf9,0xfa,0xfb,0xf8,0xf9,0xfa,0xfb]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x0110006000000000,35)(0x0410000002000000,35)(0x0510000000000004,30):(0x0110006000000000,60)(0x0410000002000000,20)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,60)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,20)(0x0510000000000004,60):(0x0110006000000000,35)(0x0410000002000000,35)(0x0510000000000004,30):(0x0110006000000000,60)(0x0410000002000000,20)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,60)(0x0510000000000004,20):(0x0110006000000000,20)(0x0410000002000000,20)(0x0510000000000004,60)]

* All VSU instructions with 100% normal data
rule_id						vsu_norm6
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa, 0xa, 0xa,	0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,10):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,10)(0x0500000000000004,30):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,10)(0x04000000025601F8,30)(0x0500000000000004,30):(0x01000063FC3C0F98,10)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,30):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,10):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,10)(0x0500000000000004,30):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,10)(0x04000000025601F8,30)(0x0500000000000004,30):(0x01000063FC3C0F98,10)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,30)]

* All VSU instructions with 100% denormal data
rule_id						vsu_denorm7
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0]
INS_BIAS_MASK				[(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,10):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,10)(0x0500000000000004,30):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,10)(0x04000000025601F8,30)(0x0500000000000004,30):(0x01000063FC3C0F98,10)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,30):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,10):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,10)(0x0500000000000004,30):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,10)(0x04000000025601F8,30)(0x0500000000000004,30):(0x01000063FC3C0F98,10)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,30)]

* All VSU instructions with 50% norm and 50% denormal data
rule_id						vsu_ndn8
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,10):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,10)(0x0500000000000004,30):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,10)(0x04000000025601F8,30)(0x0500000000000004,30):(0x01000063FC3C0F98,10)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,30):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,10):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,10)(0x0500000000000004,30):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,10)(0x04000000025601F8,30)(0x0500000000000004,30):(0x01000063FC3C0F98,10)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,30)]

* All VSU instructions with all data corners and unaligned load store
rule_id						vsu_all9
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,10):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,10)(0x0500000000000004,30):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,10)(0x04000000025601F8,30)(0x0500000000000004,30):(0x01000063FC3C0F98,10)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,30):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,10):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,10)(0x0500000000000004,30):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,10)(0x04000000025601F8,30)(0x0500000000000004,30):(0x01000063FC3C0F98,10)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,30)]

* All VSU instructions with 50% norm and 50% denormal data and varying FPSCR settings for each thread (all exceptions enabled and varying rounding mode)
rule_id						vsu_fpscr10
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0xf8,0xf9,0xfa,0xfb,0xf8,0xf9,0xfa,0xfb]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,10):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,10)(0x0500000000000004,30):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,10)(0x04000000025601F8,30)(0x0500000000000004,30):(0x01000063FC3C0F98,10)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,30):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,10):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,30)(0x04000000025601F8,10)(0x0500000000000004,30):(0x01000063FC3C0F98,30)(0x0200000000C17BC0,10)(0x04000000025601F8,30)(0x0500000000000004,30):(0x01000063FC3C0F98,10)(0x0200000000C17BC0,30)(0x04000000025601F8,30)(0x0500000000000004,30)]
