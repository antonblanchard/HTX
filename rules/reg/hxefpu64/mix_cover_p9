* P9 FPU rulefile for entire instructions coverage. 
*
* All possible instructions masks with and without P9_ONLY bit set.

* All P9 only instructions with 100% normal data
rule_id						all_p9_n1
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20)]

* All P9 only instructions with 100% denormal data
rule_id						all_p9_dn2
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0]
INS_BIAS_MASK				[(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20)]

* All P9 only instructions with 50% normal and 50% denorm data
rule_id						all_p9_ndn3
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20)]

* All P9 only instructions with all possible data corners
rule_id						all_p9_all4
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20)]

* All P9 only instructions with 50% normal and 50% denorm data and varying FPSCR for all threads
rule_id						all_p9_fpscr5
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[30,30,30,30,30,30,30,30]
fpscr						[0xf8,0xf9,0xfa,0xfb,0xf8,0xf9,0xfa,0xfb]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20):(0x011001FFFFFFFFFF,20)(0x0210000000FFFFFF,20)(0x031000001FFFFFFF,20)(0x0410000003FFFFFF,20)(0x0510000000003FFF,20)]

* All instructions with 100% normal data
rule_id						all_n6
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20)]

* All instructions with 100% denorm data
rule_id						all_dn7
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20)]

* All instructions with 50% normal and 50% denorm data
rule_id						all_ndn8
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20)]

* All instructions with all possible data corners
rule_id						all_all9
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20)]

* All instructions with 50% normal and 50% denorm data and varying FPSCR
rule_id						all_fpscr10
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[30,30,30,30,30,30,30,30]
fpscr						[0xf8,0xf9,0xfa,0xfb,0xf8,0xf9,0xfa,0xfb]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20):(0x010001FFFFFFFFFF,20)(0x0200000000FFFFFF,20)(0x030000001FFFFFFF,20)(0x0400000003FFFFFF,20)(0x0500000000003FFF,20)]
