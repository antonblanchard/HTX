* P9 FPU rulefile for DFU instructions. 
*
* VMX_DFP_ARITHMETIC
* VMX_INT_ARITHMETIC_UNSIGNED_ONLY
* P9_VMX_DFP_ARITHMETIC
* DFP_TEST_QUAD
* DFP_TEST_LONG
* P9_BFP_ELEM_ARITH_QP
* P9_BFP_ROUND_2_INT
* P9_BFP_ADD_MUL_QP
* P9_BFP_COMPARE_ONLY
* P9_BFP_TEST_ONLY
* P9_BFP_MOVE_ONLY
* P9_BFP_CONV_ONLY
* DFP_AIRTH_LONG
* DFP_AIRTH_QUAD
* DFP_CONV_L2QUAD
* DFP_DPD_2BCD_LONG
* DFP_DPD_2BCD_QUAD
* DFP_BCD_2DPD_LONG
* DFP_BCD_2DPD_QUAD
* DFP_INRT_EXRT_BIAS_LONG
* DFP_INRT_EXRT_BIAS_QUAD
* DFP_QUAN_LONG
* DFP_QUAN_QUAD
* DFP_RND_LONG_2FP
* DFP_RND_QUAD_2FP
* DFP_RERND_LONG
* DFP_RERND_QUAD
* DFP_CONV_L2SRT
* DFP_SHIFT_LONG
* DFP_SHIFT_QUAD
* DFP_CMP_LONG
* DFP_CMP_QUAD
* DFP_CONV_S2LONG
* DFP_CONV_2FIXED_LONG
* DFP_CONV_2FIXED_QUAD
* DFP_CONV_Q2LNG
* DFP_CONV_FIXED_FROM_QUAD
* P9_DFP_TEST_LONG
* P9_DFP_TEST_QUAD"
*
* Final : 0x02100000003C9400, 0x0310000000000030, 0x0410000002000000 (P9)
*         0x02000000003C9400, 0x0300000007FFFFFF, 0x0400000002000010



* P9 only DFU instructions with 100% normal data
rule_id						dfu_p9_norm1
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa, 0xa, 0xa,	0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x02100000003C9400,50)(0x0310000000000030,25)(0x0410000002000000,25):(0x02100000003C9400,25)(0x0310000000000030,25)(0x0410000002000000,50):(0x02100000003C9400,25)(0x0310000000000030,50)(0x0410000002000000,25):(0x02100000003C9400,40)(0x0310000000000030,30)(0x0410000002000000,30):(0x02100000003C9400,50)(0x0310000000000030,25)(0x0410000002000000,25):(0x02100000003C9400,25)(0x0310000000000030,25)(0x0410000002000000,50):(0x02100000003C9400,25)(0x0310000000000030,50)(0x0410000002000000,25):(0x02100000003C9400,40)(0x0310000000000030,30)(0x0410000002000000,30)]

* P9 only DFU instructions with 100% denormal data
rule_id						dfu_p9_denorm2
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0]
INS_BIAS_MASK				[(0x02100000003C9400,50)(0x0310000000000030,25)(0x0410000002000000,25):(0x02100000003C9400,25)(0x0310000000000030,25)(0x0410000002000000,50):(0x02100000003C9400,25)(0x0310000000000030,50)(0x0410000002000000,25):(0x02100000003C9400,40)(0x0310000000000030,30)(0x0410000002000000,30):(0x02100000003C9400,50)(0x0310000000000030,25)(0x0410000002000000,25):(0x02100000003C9400,25)(0x0310000000000030,25)(0x0410000002000000,50):(0x02100000003C9400,25)(0x0310000000000030,50)(0x0410000002000000,25):(0x02100000003C9400,40)(0x0310000000000030,30)(0x0410000002000000,30)]

* P9 only DFU instructions with 50% norm and 50% denormal data
rule_id						dfu_p9_ndn3
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x02100000003C9400,50)(0x0310000000000030,25)(0x0410000002000000,25):(0x02100000003C9400,25)(0x0310000000000030,25)(0x0410000002000000,50):(0x02100000003C9400,25)(0x0310000000000030,50)(0x0410000002000000,25):(0x02100000003C9400,40)(0x0310000000000030,30)(0x0410000002000000,30):(0x02100000003C9400,50)(0x0310000000000030,25)(0x0410000002000000,25):(0x02100000003C9400,25)(0x0310000000000030,25)(0x0410000002000000,50):(0x02100000003C9400,25)(0x0310000000000030,50)(0x0410000002000000,25):(0x02100000003C9400,40)(0x0310000000000030,30)(0x0410000002000000,30)]

* P9 only DFU instructions with 50% norm and 50% denormal data and unaligned load store
rule_id						dfu_p9_all4
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x02100000003C9400,50)(0x0310000000000030,25)(0x0410000002000000,25):(0x02100000003C9400,25)(0x0310000000000030,25)(0x0410000002000000,50):(0x02100000003C9400,25)(0x0310000000000030,50)(0x0410000002000000,25):(0x02100000003C9400,40)(0x0310000000000030,30)(0x0410000002000000,30):(0x02100000003C9400,50)(0x0310000000000030,25)(0x0410000002000000,25):(0x02100000003C9400,25)(0x0310000000000030,25)(0x0410000002000000,50):(0x02100000003C9400,25)(0x0310000000000030,50)(0x0410000002000000,25):(0x02100000003C9400,40)(0x0310000000000030,30)(0x0410000002000000,30)]

* P9 only DFU instructions with 50% norm and 50% denormal data and varying FPSCR settings for each thread (all exceptions enabled and varying rounding mode)
rule_id						dfu_p9_fpscr5
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0xf8,0xf9,0xfa,0xfb,0xf8,0xf9,0xfa,0xfb]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x02100000003C9400,50)(0x0310000000000030,25)(0x0410000002000000,25):(0x02100000003C9400,25)(0x0310000000000030,25)(0x0410000002000000,50):(0x02100000003C9400,25)(0x0310000000000030,50)(0x0410000002000000,25):(0x02100000003C9400,40)(0x0310000000000030,30)(0x0410000002000000,30):(0x02100000003C9400,50)(0x0310000000000030,25)(0x0410000002000000,25):(0x02100000003C9400,25)(0x0310000000000030,25)(0x0410000002000000,50):(0x02100000003C9400,25)(0x0310000000000030,50)(0x0410000002000000,25):(0x02100000003C9400,40)(0x0310000000000030,30)(0x0410000002000000,30)]

* All DFU instructions with 100% normal data
rule_id						dfu_norm6
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa, 0xa, 0xa,	0xa, 0xa, 0xa, 0xa, 0xa]
INS_BIAS_MASK				[(0x02000000003C9400,40)(0x0300000007FFFFFF,40)(0x0400000002000010,20):(0x02000000003C9400,40)(0x0300000007FFFFFF,20)(0x0400000002000010,40):(0x02000000003C9400,20)(0x0300000007FFFFFF,40)(0x0400000002000010,40):(0x02000000003C9400,40)(0x0300000007FFFFFF,30)(0x0400000002000010,30):(0x02000000003C9400,40)(0x0300000007FFFFFF,40)(0x0400000002000010,20):(0x02000000003C9400,40)(0x0300000007FFFFFF,20)(0x0400000002000010,40):(0x02000000003C9400,20)(0x0300000007FFFFFF,40)(0x0400000002000010,40):(0x02000000003C9400,40)(0x0300000007FFFFFF,30)(0x0400000002000010,30)]

* All DFU instructions with 100% denormal data
rule_id						dfu_denorm7
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0]
INS_BIAS_MASK				[(0x02000000003C9400,40)(0x0300000007FFFFFF,40)(0x0400000002000010,20):(0x02000000003C9400,40)(0x0300000007FFFFFF,20)(0x0400000002000010,40):(0x02000000003C9400,20)(0x0300000007FFFFFF,40)(0x0400000002000010,40):(0x02000000003C9400,40)(0x0300000007FFFFFF,30)(0x0400000002000010,30):(0x02000000003C9400,40)(0x0300000007FFFFFF,40)(0x0400000002000010,20):(0x02000000003C9400,40)(0x0300000007FFFFFF,20)(0x0400000002000010,40):(0x02000000003C9400,20)(0x0300000007FFFFFF,40)(0x0400000002000010,40):(0x02000000003C9400,40)(0x0300000007FFFFFF,30)(0x0400000002000010,30)]

* All DFU instructions with 50% norm and 50% denormal data
rule_id						dfu_ndn8
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x02000000003C9400,40)(0x0300000007FFFFFF,40)(0x0400000002000010,20):(0x02000000003C9400,40)(0x0300000007FFFFFF,20)(0x0400000002000010,40):(0x02000000003C9400,20)(0x0300000007FFFFFF,40)(0x0400000002000010,40):(0x02000000003C9400,40)(0x0300000007FFFFFF,30)(0x0400000002000010,30):(0x02000000003C9400,40)(0x0300000007FFFFFF,40)(0x0400000002000010,20):(0x02000000003C9400,40)(0x0300000007FFFFFF,20)(0x0400000002000010,40):(0x02000000003C9400,20)(0x0300000007FFFFFF,40)(0x0400000002000010,40):(0x02000000003C9400,40)(0x0300000007FFFFFF,30)(0x0400000002000010,30)]

* All DFU instructions with 50% norm and 50% denormal data and unaligned load store
rule_id						dfu_all9
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[20,30,20,30,20,30,20,30]
fpscr						[0,0,0,0,0,0,0,0]
DATA_BIAS_MASK				[0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111, 0x1111111111]
INS_BIAS_MASK				[(0x02000000003C9400,40)(0x0300000007FFFFFF,40)(0x0400000002000010,20):(0x02000000003C9400,40)(0x0300000007FFFFFF,20)(0x0400000002000010,40):(0x02000000003C9400,20)(0x0300000007FFFFFF,40)(0x0400000002000010,40):(0x02000000003C9400,40)(0x0300000007FFFFFF,30)(0x0400000002000010,30):(0x02000000003C9400,40)(0x0300000007FFFFFF,40)(0x0400000002000010,20):(0x02000000003C9400,40)(0x0300000007FFFFFF,20)(0x0400000002000010,40):(0x02000000003C9400,20)(0x0300000007FFFFFF,40)(0x0400000002000010,40):(0x02000000003C9400,40)(0x0300000007FFFFFF,30)(0x0400000002000010,30)]

* All DFU instructions with 50% norm and 50% denormal data and varying FPSCR settings for each thread (all exceptions enabled and varying rounding mode)
rule_id						dfu_fpscr10
num_oper					2000
num_threads					0
seed						[0,0,0,0,0,0,0,0]
stream_depth				2000
test_method					1
unaligned_loads_stores_%	[0,0,0,0,0,0,0,0]
fpscr						[0xf8,0xf9,0xfa,0xfb,0xf8,0xf9,0xfa,0xfb]
DATA_BIAS_MASK				[0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55]
INS_BIAS_MASK				[(0x02000000003C9400,40)(0x0300000007FFFFFF,40)(0x0400000002000010,20):(0x02000000003C9400,40)(0x0300000007FFFFFF,20)(0x0400000002000010,40):(0x02000000003C9400,20)(0x0300000007FFFFFF,40)(0x0400000002000010,40):(0x02000000003C9400,40)(0x0300000007FFFFFF,30)(0x0400000002000010,30):(0x02000000003C9400,40)(0x0300000007FFFFFF,40)(0x0400000002000010,20):(0x02000000003C9400,40)(0x0300000007FFFFFF,20)(0x0400000002000010,40):(0x02000000003C9400,20)(0x0300000007FFFFFF,40)(0x0400000002000010,40):(0x02000000003C9400,40)(0x0300000007FFFFFF,30)(0x0400000002000010,30)]
